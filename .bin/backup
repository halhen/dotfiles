#!/bin/bash
#
# Backup script using rsync snapshot style
# Reference: http://www.mikerubel.org/computers/rsync_snapshots/

function _fatal {
    echo "Fatal: $*" >&2
    exit 1
}

function _help {
    echo "
Usage: $(basename $0) -s dir_to_backup -d destination_dir 
                [-n keep_number_of] [-v] [-h]

    Options:
        -s dir_to_backup    Backup all contents in dir_to_backup.
        -d destination_dir  Backup files to destination_dir. 
                            destination_dir can contain date(1) FORMATS.
        -n keep_number_of   Keep keep_number_of recent snapshots, as defined
                            by backup directory creation time. This is
                            only applicable if destination_dir contains
                            date(1) elements that make different. 
                            Default: 3
        -v                  verbose mode
        -h                  print this help and exit"

    exit 1
}

# Find existing paths that contain the strftime FORMAT given
function _find_existing_backups {
    for cand in $(ls -cd1 $(find_by_strftime_format $1)); do
        echo $cand
    done
}

# Set defaults
verbose=false
bu_num=3

# Parse command line
while getopts "hvs:d:n:" flag
do
    case $flag in 
        h)  _help;;
        v)  verbose=true;;
        s)  bu_source="$OPTARG";;
        d)  bu_dest="$OPTARG";;
        n)  case $OPTARG in
                [0-9]*) bu_num="$OPTARG";;
                *)      _fatal "Error: -n requires an integer argument";;
            esac;;
        ?)  fatal "Unrecognized option, see $(basename $0) -h for help."
    esac
done

# Verify command line
[[ -z $bu_source ]] && _fatal "Missing -s option. See $(basename $0) -h for help." 
[[ ! -d $bu_source ]] && _fatal "Missing source directory: $bu_source"
[[ -z $bu_dest ]] && _fatal "Missing -d option. See $(basename $0) -h for help." 
[[ $bu_num -lt 1 ]] && bu_num=1

$verbose && echo "Source: $bu_source"
$verbose && echo "Destination: $bu_dest"
$verbose && echo "Number of backups to keep: $bu_num"

# Get name of last known backup
previous_backup=$(_find_existing_backups "$bu_dest" | head -n 1)
$verbose && echo "Previous backup: $previous_backup"

# Name this backup
this_backup=$(date +"$bu_dest")
$verbose && echo "This backup: $this_backup"

# Create new backup dir
mkdir -p "$this_backup" || _fatal "Failed to create directory: $this_backup"

# Hardlink old contents if it exists, unless we're redoing backup to same dir
if [[ -d "$previous_backup" && "$previous_backup" != "$this_backup" ]]; then
    $verbose && echo "Hardlinking previous backup..."
    cp -al "$previous_backup/." "$this_backup" || _fatal "Hardlinking failed"
    $verbose && echo "    Done"
fi

# Do the actual rsync backup
$verbose && echo "rsync:ing backup..."
$verbose && rsync_p="-P"
rsync $rsync_p -a --delete "$bu_source/" "$this_backup" || _fatal "rsync failed"
$verbose && echo "    Done"

# Removing old backups
for old in $(_find_existing_backups "$bu_dest" | tail -n +$(( $bu_num+1 ))); do
    $verbose && echo "Removing old backup: $old"
    rm -rf $old || echo "Remove failed, continuing..."
done

$verbose && echo "All done"
