#!/bin/bash
#
# Backup script using rsync snapshot style
# Reference: http://www.mikerubel.org/computers/rsync_snapshots/

function _fatal {
    echo "Fatal: $*" >&2
    exit 1
}

function _help {
    echo "
Usage: $0 -s dir_to_backup -d destination_dir [-v] [-h]

    Options:
        -s dir_to_backup    Backup all contents in dir_to_backup.
        -d destination_dir  Backup files to destination_dir. 
                            In this folder, daily, weekly and monthly folders
                            will be created.
        -v                  verbose mode
        -h                  print this help and exit"

    exit 1
}

# Find existing paths that contain the strftime FORMAT given
function _find_existing_backups {
    matching_dirs=$(find_by_strftime_format "$1")
    [[ $matching_dirs ]] && ls -td1 $(find_by_strftime_format "$1")
}

# Remove old backups
# $1 is the format of backups, $2 is number of backups to keep
function _keep_backups {
    local dirpattern="$1"
    local num_keepers="$2"
    [[ $1 && $2 ]] || _fatal "Missing parameters in _keep_backups"

    for old in $(_find_existing_backups "$dirpattern" | tail -n +$(( $num_keepers+1 ))); do
        $verbose && echo "Removing old backup: $old"
        rm -rf "$old" || echo "Remove failed, continuing..."
    done
}

# Create a symlink snapshot of $1 named $2.
function _snapshot {
    snapshot_dest=$2
    snapshot_name=$(date +"$snapshot_dest")
    cp -alL "$1" "$snapshot_name" || _fatal "Snapshot to $snapshot_name failed"
}

# Set defaults
verbose=false

# Parse command line
while getopts "hvs:d:n:" flag
do
    case $flag in 
        h)  _help;;
        v)  verbose=true;;
        s)  bu_source="$OPTARG";;
        d)  bu_dest="$OPTARG";;
        ?)  _fatal "Unrecognized option, see $(basename $0) -h for help."
    esac
done

# Verify command line
[[ -z $bu_source ]] && _fatal "Missing -s option. See $(basename $0) -h for help." 
[[ ! -d $bu_source ]] && _fatal "Missing source directory: $bu_source"
[[ -z $bu_dest ]] && _fatal "Missing -d option. See $(basename $0) -h for help." 

$verbose && echo "Source: $bu_source"
$verbose && echo "Destination: $bu_dest"

daily_dest="$bu_dest/daily-%Y%m%d"
weekly_dest="$bu_dest/weekly-%Y%W"
monthly_dest="$bu_dest/monthly-%Y%m"

# Get name of last known backup
previous_backup=$(_find_existing_backups "$daily_dest" | head -n 1)
$verbose && echo "Previous backup: $previous_backup"

# Name this backup
this_backup=$(date +"$daily_dest")
$verbose && echo "This backup: $this_backup"

# Create new backup dir
mkdir -p "$this_backup" || _fatal "Failed to create directory: $this_backup"

# Hardlink old contents if it exists, unless we're redoing backup to same dir
if [[ -d "$previous_backup" && "$previous_backup" != "$this_backup" ]]; then
    $verbose && echo "Hardlinking previous backup..."
    cp -alL "$previous_backup/." "$this_backup" || _fatal "Hardlinking failed"
    $verbose && echo "    Done"
fi

# Do the actual rsync backup
$verbose && echo "rsync:ing backup..."
$verbose && rsync_p="-P"
rsync $rsync_p -ah --copy-unsafe-links --delete "$bu_source/" "$this_backup" || _fatal "rsync failed"
$verbose && echo "    Done"

# Update `latest` symlink
latest_symlink="$(dirname "$this_backup")/latest"
$verbose && echo "Creating $latest_symlink"
rm $latest_symlink 2>/dev/null
ln -s "$this_backup" "$latest_symlink" || _fatal "Failed to create the latest symlink"

# Update weekly and monthly snapshots
$verbose && echo "Creating weekly snapshot"
_snapshot "$latest_symlink" "$weekly_dest"
$verbose && echo "Creating monthly snapshot"
_snapshot "$latest_symlink" "$monthly_dest"

# Remove old ones
$verbose && echo "Removing obsolete backups"
_keep_backups "$daily_dest" 6
_keep_backups "$weekly_dest" 3
_keep_backups "$monthly_dest" 3

$verbose && echo "Backup done"
